import sysvertexlist=[]class Edge:			def __init__(self):		v1=0		v2=0		w=0	def setValues(self,v1,v2,w):		self.v1=v1		self.v2=v2		self.w=w		def print_edge(self):		print " v1="+str(self.v1)+" v2="+str(self.v2)+" w="+str(self.w)class vertex:	def __init__(self):		self.val=0		self.leader=0		self.clusterlist= [0]	def setValue(self, v):		self.val=v	def setLeader(self, v):		self.leader=v	def addtoClusterlist(self,v):		self.clusterlist.append(v)	def offset(self):		self.clusterlist.pop(0)	def print_details(self):		print " v1="+str(self.val)+" leader="+str(self.leader)		print "cluster="		print self.clusterlist	def find_leader(self):		return self.leader	def get_clusterlist(self):				return vertexlist[self.leader-1].clusterlist	def empty_cluster(self):		self.clusterlist=[]def union(v1,v2):	newleader=v1	clusterlist=vertexlist[v2-1].get_clusterlist()	print "Newleader="+str(v1)	print "merging list="	print clusterlist	for vertex in clusterlist:		vertexlist[vertex-1].setLeader(v1)		vertexlist[v1-1].addtoClusterlist(vertex)		vertexlist[vertex-1].empty_cluster()def union_find(v1,v2):	if vertexlist[v1-1].find_leader()==vertexlist[v2-1].find_leader():		return True	else:		return Falsedef main():	file=open(sys.argv[1])	edgelist=[]	clusters=0	nodes=0	for line in file:		if len(line.split(" "))>2:			#print line.split(" ")			e= Edge()			e.setValues(int(line.split(" ")[0]),int(line.split(" ")[1]),int(line.split(" ")[2]))			edgelist.append(e)			#print edgelist		else:			clusters=int(line)			nodes=int(line)		for i in range(clusters):		v=vertex()		v.setValue(i+1)		v.setLeader(i+1)		v.addtoClusterlist(i+1)		v.offset()		vertexlist.append(v)	for i in range(clusters):		vertexlist[i].print_details()				print "loading edges"	for i in range(clusters):		vertexlist[i].print_details()	for edge in edgelist:		edge.print_edge()	edgelist.sort(key=lambda x:x.w)	print "Sorted, clusters="+str(clusters)	for edge in edgelist:		edge.print_edge()	n_edges=0	while clusters>4:			v1=edgelist[n_edges].v1			v2=edgelist[n_edges].v2			if not union_find(v1,v2):				print "\nUnioning="+str(v1)+" "+str(v2)				union(v1,v2)				clusters=clusters-1				print "Clusters="+str(clusters)				for i in range(nodes):					vertexlist[i].print_details()			n_edges=n_edges+1	while True:		v1=edgelist[n_edges].v1		v2=edgelist[n_edges].v2		if not union_find(v1,v2):			print "Max space="+str(edgelist[n_edges].w)			break		n_edges=n_edges+1if __name__=="__main__":	main()